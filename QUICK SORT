QUICK SORT

QuickSort is a sorting algorithm based on the Divide and Conquer algorithm.
It picks an element as a pivot and partitions the given array around the picked pivot by placing the pivot in its correct position in the sorted array.

Void quicksort(int arr[],int s,int e){
 //base case
 
 if(s>=e)
    return;
 
 //partition logic return pivot Index
 
 int p = partition(arr,s,e);
 
 //Recursion calls
 //left
   quicksort(arr,s,p-1);
 
 //right
    quicksort(arr,p+1,2);
    
 int partition(int arr[],int s,int e){
 //step 1: choose the pivot element
 
  int pivotIndex = s;
  int pivotElement = arr[s];
  
  //step 2:find right position for pivot element and place it there
  
  int count = 0;
  for(int i = s+1; i = e; i++){
     if(arr[j]<= pivotelement){
      count++;
  }
 }
  int rightIndex = s+count;
  swap(arr[pivotIndex], arr[rightIndex]);
  pivotIndex = rightIndex;
  
  
 step 3: left me chote and right me bdhe.
 
 int i = s;
 int j = e;
 
 while(i<pivotIndex && j>pivotIndex){
 while(arr[i]<pivotelement){
  i++;
 }
 
 while(arr[j] > pivotelement){
  j--;
  }
  
  
  if(i< pivotIndex && j > pivotIndex)
    swap(arr[i],arr[j] );
   }
   return pivotIndex;


int main()
int arr[]= {8,1,3,4,20,50,30};
int n = 7;

int s = 0;
int e = n-1;
quicksort(arr,s,e);
for(int i = 0;i<n;i++){
    cout<<arr[i]<<" ";
    }
 cout<<endl;
return 0;
